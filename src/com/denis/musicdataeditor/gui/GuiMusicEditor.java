package com.denis.musicdataeditor.gui;

import com.denis.musicdataeditor.core.Canzone;
import com.denis.musicdataeditor.config.References;
import com.denis.musicdataeditor.core.SongList;
import com.denis.musicdataeditor.image.CoverArt;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;


public class GuiMusicEditor extends javax.swing.JFrame {

    /**
     * Creates new form GuiMusicEditor
     */
    public GuiMusicEditor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<Canzone>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        t_TITOLO = new javax.swing.JTextField();
        t_ARTISTA = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        t_ALBUM = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        t_AUTORE = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        t_ANNO = new javax.swing.JTextField();
        t_NUMERO = new javax.swing.JTextField();
        t_GENERE = new javax.swing.JComboBox<>();
        b_delete = new javax.swing.JButton();
        b_save = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        t_path = new javax.swing.JTextField();
        b_copia = new javax.swing.JButton();
        b_sfoglia = new javax.swing.JButton();
        b_cerca = new javax.swing.JButton();
        b_image = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        coverLabel = new JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        b_update = new javax.swing.JButton();
        b_dir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("GuiMusicEditor");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusTraversalPolicyProvider(true);
        setLocation(new Point((int)Toolkit.getDefaultToolkit().getScreenSize().getWidth()-800, 0));
        setMaximumSize(Toolkit.getDefaultToolkit().getScreenSize());
        setMinimumSize(new Dimension(800, (int)Toolkit.getDefaultToolkit().getScreenSize().getHeight()));
        setPreferredSize(new Dimension(800, (int)Toolkit.getDefaultToolkit().getScreenSize().getHeight()));

        jLabel1.setText("Track list:");

        jList1.setModel(new javax.swing.AbstractListModel<Canzone>() {
            public int getSize() { return track_list.size(); }
            public Canzone getElementAt(int i){return track_list.get(i);    }
        });
        myFuckingJList1Setting();
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel3.setText("Edit data:");

        jLabel4.setText("Titolo:");

        t_TITOLO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                t_TITOLOMouseClicked(evt);
            }
        });
        tabKeybindings();

        t_ARTISTA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                t_ARTISTAMouseClicked(evt);
            }
        });

        jLabel5.setText("Artista:");

        jLabel6.setText("Album:");

        t_ALBUM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                t_ALBUMMouseClicked(evt);
            }
        });

        jLabel7.setText("Art. Album:");

        t_AUTORE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                t_AUTOREMouseClicked(evt);
            }
        });

        jLabel8.setText("Anno:");

        jLabel9.setText("N. track:");

        jLabel10.setText("Genere:");

        t_ANNO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                t_ANNOMouseClicked(evt);
            }
        });

        t_NUMERO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                t_NUMEROMouseClicked(evt);
            }
        });

        t_GENERE.setModel(new javax.swing.DefaultComboBoxModel<>(References.GENRES_LIST));
        t_GENERE.setSelectedIndex(-1);

        b_delete.setText("Delete");
        b_delete.setToolTipText("Deletes selected tracks. Be Carefull ;^)");
        b_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_deleteActionPerformed(evt);
            }
        });

        b_save.setText("Save");
        b_save.setToolTipText("You can guess it on your own D:");
        b_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_saveActionPerformed(evt);
            }
        });

        jLabel11.setText("Copia Canzoni su:");

        t_path.setEditable(false);

        b_copia.setText("Copia");

        b_sfoglia.setText("Sfoglia");

        b_cerca.setText("Google it!");
        b_cerca.setToolTipText("Googles for the artist and album on wikipedia");
        b_cerca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cercaActionPerformed(evt);
            }
        });

        b_image.setText("Album Art");

        coverLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        coverLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(coverLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(coverLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jRadioButton1.setText("jRadioButton1");

        jRadioButton2.setText("jRadioButton2");

        b_update.setText("Update List");
        b_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_updateActionPerformed(evt);
            }
        });

        b_dir.setText("Tracks Dir");
        b_dir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_dirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(b_dir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_update))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(t_path)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_sfoglia))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(t_AUTORE)
                            .addComponent(t_ALBUM)
                            .addComponent(t_ARTISTA, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(t_ANNO, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(t_TITOLO, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(t_NUMERO)
                            .addComponent(t_GENERE, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addComponent(jRadioButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButton2)
                        .addGap(0, 41, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(b_save, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(b_image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(b_cerca, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(b_delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(b_copia, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_update)
                    .addComponent(b_dir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t_TITOLO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(t_ARTISTA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t_ALBUM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t_AUTORE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t_ANNO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(t_NUMERO)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t_GENERE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(b_save)
                            .addComponent(b_delete))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(b_cerca)
                            .addComponent(b_image))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(t_path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b_sfoglia))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton1)
                            .addComponent(jRadioButton2))
                        .addGap(7, 7, 7)
                        .addComponent(b_copia)
                        .addGap(0, 66, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void myFuckingJList1Setting() {
        // Shortcut for deleting selected tracks
        addKeyBinding(jList1, JComponent.WHEN_FOCUSED, KeyEvent.VK_DELETE, 0, "delete", delete);

        // Shortcut for the button Google it
        addKeyBinding(jList1, JComponent.WHEN_FOCUSED, KeyEvent.VK_G, InputEvent.CTRL_MASK,
                "googleIt", new AbstractAction() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        b_cercaActionPerformed(e);
                    }
                }
        );

        // Opens the track with the default media player
        addKeyBinding(jList1, KeyEvent.VK_ENTER, InputEvent.CTRL_MASK, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    Desktop.getDesktop().open(new File(jList1.getSelectedValue().getSong_path()));
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            }
        });

        // jump from jlist to correspondent jtextareas
        addKeyBinding(jList1, JComponent.WHEN_FOCUSED, KeyEvent.VK_Q, InputEvent.CTRL_MASK, "goTitle",
                new AbstractAction() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        t_TITOLO.requestFocusInWindow();
                        t_TITOLO.select(0, t_TITOLO.getText().length());
                    }
                });
        addKeyBinding(jList1, JComponent.WHEN_FOCUSED, KeyEvent.VK_W, InputEvent.CTRL_MASK, "goArtist",
                new AbstractAction() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        t_ARTISTA.requestFocusInWindow();
                        t_ARTISTA.select(0, t_ARTISTA.getText().length());
                    }
                });
        addKeyBinding(jList1, JComponent.WHEN_FOCUSED, KeyEvent.VK_E, InputEvent.CTRL_MASK, "goAlbum",
                new AbstractAction() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        t_ALBUM.requestFocusInWindow();
                        t_ALBUM.select(0, t_ALBUM.getText().length());
                    }
                });
        addKeyBinding(jList1, JComponent.WHEN_FOCUSED, KeyEvent.VK_R, InputEvent.CTRL_MASK, "goAutor",
                new AbstractAction() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        t_AUTORE.requestFocusInWindow();
                        t_AUTORE.select(0, t_AUTORE.getText().length());
                    }
                });
        addKeyBinding(jList1, JComponent.WHEN_FOCUSED, KeyEvent.VK_S, InputEvent.CTRL_MASK, "goYear",
                new AbstractAction() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        t_ANNO.requestFocusInWindow();
                        t_ANNO.select(0, t_ANNO.getText().length());
                    }
                });
        addKeyBinding(jList1, JComponent.WHEN_FOCUSED, KeyEvent.VK_D, InputEvent.CTRL_MASK, "goNumber",
                new AbstractAction() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        t_NUMERO.requestFocusInWindow();
                        t_NUMERO.select(0, t_NUMERO.getText().length());
                    }
                });
        addKeyBinding(jList1, JComponent.WHEN_FOCUSED, KeyEvent.VK_F, InputEvent.CTRL_MASK, "goGenere",
                new AbstractAction() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        t_GENERE.requestFocusInWindow();
                        t_GENERE.setPopupVisible(true);
                    }
                });


        addKeyBinding(t_AUTORE, JComponent.WHEN_FOCUSED, KeyEvent.VK_1, InputEvent.CTRL_MASK, "copyField",
                new AbstractAction() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        t_ARTISTA.setText(t_AUTORE.getText());
                    }
                });

        // / jump back to jlist form text areas
        Action backToJlistFromTArea = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                jList1.requestFocusInWindow();
            }
        };
        addKeyBinding(t_TITOLO, KeyEvent.VK_TAB, InputEvent.CTRL_MASK, backToJlistFromTArea);
        addKeyBinding(t_ARTISTA, KeyEvent.VK_TAB, InputEvent.CTRL_MASK, backToJlistFromTArea);
        addKeyBinding(t_ALBUM, KeyEvent.VK_TAB, InputEvent.CTRL_MASK, backToJlistFromTArea);
        addKeyBinding(t_AUTORE, KeyEvent.VK_TAB, InputEvent.CTRL_MASK, backToJlistFromTArea);
        addKeyBinding(t_ANNO, KeyEvent.VK_TAB, InputEvent.CTRL_MASK, backToJlistFromTArea);
        addKeyBinding(t_NUMERO, KeyEvent.VK_TAB, InputEvent.CTRL_MASK, backToJlistFromTArea);
        addKeyBinding(t_GENERE, KeyEvent.VK_TAB, InputEvent.CTRL_MASK, backToJlistFromTArea);

        // fast select all text in text area keyboard shortcut
        addKeyBinding(t_ARTISTA, KeyEvent.VK_BACK_SLASH, InputEvent.ALT_MASK, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                t_ARTISTA.select(0, t_ARTISTA.getText().length());
            }
        });
        addKeyBinding(t_ALBUM, KeyEvent.VK_BACK_SLASH, InputEvent.ALT_MASK, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                t_ALBUM.select(0, t_ALBUM.getText().length());
            }
        });
        addKeyBinding(t_TITOLO, KeyEvent.VK_BACK_SLASH, InputEvent.ALT_MASK, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                t_TITOLO.select(0, t_TITOLO.getText().length());
            }
        });
        addKeyBinding(t_AUTORE, KeyEvent.VK_BACK_SLASH, InputEvent.ALT_MASK, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                t_AUTORE.select(0, t_AUTORE.getText().length());
            }
        });
        addKeyBinding(t_ANNO, KeyEvent.VK_BACK_SLASH, InputEvent.ALT_MASK, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                t_ANNO.select(0, t_ANNO.getText().length());
            }
        });
        addKeyBinding(t_NUMERO, KeyEvent.VK_BACK_SLASH, InputEvent.ALT_MASK, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                t_NUMERO.select(0, t_NUMERO.getText().length());
            }
        });

        // fast save from the text areas
        addKeyBinding(t_TITOLO, JComponent.WHEN_FOCUSED, KeyEvent.VK_ENTER, 0, "save", save);
        addKeyBinding(t_ARTISTA, JComponent.WHEN_FOCUSED, KeyEvent.VK_ENTER, 0, "save", save);
        addKeyBinding(t_ALBUM, JComponent.WHEN_FOCUSED, KeyEvent.VK_ENTER, 0, "save", save);
        addKeyBinding(t_AUTORE, JComponent.WHEN_FOCUSED, KeyEvent.VK_ENTER, 0, "save", save);
        addKeyBinding(t_ANNO, JComponent.WHEN_FOCUSED, KeyEvent.VK_ENTER, 0, "save", save);
        addKeyBinding(t_NUMERO, JComponent.WHEN_FOCUSED, KeyEvent.VK_ENTER, 0, "save", save);
        addKeyBinding(t_GENERE, JComponent.WHEN_FOCUSED, KeyEvent.VK_ENTER, 0, "save", save);
    }

    /**
     *  @param component component to which will be added the new keybindings
     * @param condition its an int that rapresents JComponet. WHEN_FOCUSED
     * @param key key KeyEvent -> KeyEvent:VK_*desired key*
     * @param modifier mask modifier(shift, ctrl, alt etc) -> InputEvent.*and then the mask*. 0 (zero) if none
     * @param s String that rapresents the name identifier(?) of the method
     * @param action the action that would make
     */
    private void addKeyBinding(JComponent component, int condition, int key, int modifier, String s, Action action){
        component.getInputMap(condition).put(KeyStroke.getKeyStroke(key, modifier), s);
        component.getActionMap().put(s, action);
    }

    private void addKeyBinding(JComponent component, int key, int modifier, Action action){
        component.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(key, modifier), "action");
        component.getActionMap().put("action", action);
    }

    /**
     * Handles the behaviour of the components focus when tab is pressed
     */
    private void tabKeybindings(){
        b_dir.setFocusable(false);
        b_update.setFocusable(false);
        b_delete.setFocusTraversalKeysEnabled(false);
        b_image.setFocusTraversalKeysEnabled(false);
        b_delete.setFocusTraversalKeysEnabled(false);
        t_path.setFocusTraversalKeysEnabled(false);
        setNextFocusable(jList1, t_TITOLO);
        setNextFocusable(t_TITOLO, t_ARTISTA);
        setNextFocusable(t_ARTISTA, t_ALBUM);
        setNextFocusable(t_ALBUM, t_AUTORE);
        setNextFocusable(t_AUTORE, t_ANNO);
        setNextFocusable(t_ANNO, t_NUMERO);
        setNextFocusable(t_NUMERO, t_GENERE);
        setNextFocusable(t_GENERE, b_save);
        setNextFocusable(b_save, b_sfoglia);
        setNextFocusable(b_sfoglia, b_copia);
    }

    /**
     * set focus behaviour between src and next jcomponents
     * @param src tab shifts focus from src to next
     * @param next shift+TAB shifts back focus from next to src
     */
    private void setNextFocusable(JComponent src, JComponent next)
    {
        src.setFocusTraversalKeysEnabled(false);
        next.setFocusTraversalKeysEnabled(false);
        src.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), "tab_next");
        src.getActionMap().put("tab_next", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                next.requestFocusInWindow();
            }
        });
        next.getInputMap(JComponent.WHEN_FOCUSED).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_TAB, InputEvent.SHIFT_MASK), "tab_prev");
        next.getActionMap().put("tab_prev", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                src.requestFocusInWindow();
            }
        });
    }

    private void b_saveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_b_saveActionPerformed
        if(jList1.getSelectedIndices().length == 0) return;
        String testString = "MULTIPLE SELECTION";
        for (Canzone song : jList1.getSelectedValuesList()) {
            if (!t_TITOLO.getText().trim().equals(testString)) {
                song.setTITOLO(References.toTitleCase(t_TITOLO.getText().trim()));
            }
            if (!t_ARTISTA.getText().trim().equals(testString)) {
                song.setARTISTA(References.toTitleCase(t_ARTISTA.getText().trim()));
            }
            if (!t_AUTORE.getText().trim().equals(testString)) {
                song.setAUTORE(References.toTitleCase(t_AUTORE.getText().trim()));
            }
            if (!t_ALBUM.getText().trim().equals(testString)) {
                song.setALBUM(References.toTitleCase(t_ALBUM.getText().trim()));
            }
            if (!t_ANNO.getText().trim().equals(testString)) {
                song.setANNO(References.toTitleCase(t_ANNO.getText().trim()));
            }
            if (!t_NUMERO.getText().trim().equals(testString)) {
                song.setNUMERO(References.toTitleCase(t_NUMERO.getText().trim()));
            }
            song.setGENERE(t_GENERE.getSelectedItem().toString());
            song.save();
        }
        track_list.updateTrackList();
        jList1.clearSelection();
        jList1.repaint();
        t_AUTORE.repaint();t_ARTISTA.repaint();t_TITOLO.repaint();t_ALBUM.repaint();
        t_ANNO.repaint();t_NUMERO.repaint();t_GENERE.repaint();

    }//GEN-LAST:event_b_saveActionPerformed

    private void b_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_deleteActionPerformed
        jList1.getSelectedValuesList().forEach(
                s -> {
                    new File(s.getSong_path()).delete();
                    track_list.remove(s);
                    //track_list.updateTrackList();
                });
        jList1.clearSelection();
        jList1.repaint();
        t_AUTORE.repaint();t_ARTISTA.repaint();t_TITOLO.repaint();t_ALBUM.repaint();
        t_ANNO.repaint();t_NUMERO.repaint();t_GENERE.repaint();

    }//GEN-LAST:event_b_deleteActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged

        ArrayList<String> templist = new ArrayList<>();
        String[] attributeList = {
                "ARTISTA",
                "ALBUM",
                "AUTORE",
                "ANNO",
                "GENERE"
        };
        // Se Nessun elemento nella lista è selezionato(cosa che accade dopo la cancellazione) le jtarea devono ritornare
        // ad essere vuote
        switch (jList1.getSelectedIndices().length) {
            case 0:
                t_TITOLO.setText("");
                t_ARTISTA.setText("");
                t_ALBUM.setText("");
                t_AUTORE.setText("");
                t_ANNO.setText("");
                t_NUMERO.setText("");
                t_GENERE.setSelectedIndex(-1);
                coverLabel.setIcon(null);
                coverLabel.setText("");
                break;
            case 1:
                t_TITOLO.setText(track_list.get(jList1.getSelectedIndex()).getTITOLO());
                t_ARTISTA.setText(track_list.get(jList1.getSelectedIndex()).getARTISTA());
                t_ALBUM.setText(track_list.get(jList1.getSelectedIndex()).getALBUM());
                t_AUTORE.setText(track_list.get(jList1.getSelectedIndex()).getAUTORE());
                t_ANNO.setText(track_list.get(jList1.getSelectedIndex()).getANNO());
                t_NUMERO.setText(track_list.get(jList1.getSelectedIndex()).getNUMERO());
                setCoverLabel();
                setStartingGenere();
                break;
            default:
                // Quando selezioni più canzoni
                // Ho deciso che le textarea TITOLO e NUMERO TRACCIA debbano sempre visualizzare MULT SEL quando piu tracce
                // selezionate, poiché sarà scarsamente probabile che più canzoni selezionate abbiano lo stesso nome e numero.
                // Se ciò dovesse avvenire niente mi impedisce di modificare comunque il loro valore.
                t_TITOLO.setText("MULTIPLE SELECTION");
                t_NUMERO.setText("MULTIPLE SELECTION");
                coverLabel.setIcon(null);
                coverLabel.setText("MULTIPLE SELECTION");
                // loop per ogni attributo in attribute list, poi loop per ogni canzone selezionata nella jlist
                for (String attributo : attributeList) {
                    for (Canzone song : jList1.getSelectedValuesList()) {
                        // creo prima un metodo per la reflection
                        Method metodo = null;
                        try {
                            metodo = song.getClass().getMethod("get"+attributo);
                        } catch (NoSuchMethodException e) {
                            e.printStackTrace();
                        }
                        
                        // se il metodo con il nome dell'attributo non è gia presente in templist: lo aggiungo
                        // così in temp list ci dovrebbe essere una copia per ogni autore, album, artista differente per ciclo
                        try {
                            assert metodo != null;
                            String return_metodo = metodo.invoke(song) == null ?
                                    "null" : metodo.invoke(song).toString();
                            if (!templist.contains(return_metodo))
                            {
                                templist.add(return_metodo);
                            }
                        } catch (IllegalAccessException|InvocationTargetException e) {
                            e.printStackTrace();
                        }
                    } // Fine loop for (Canzone song : jList1.getSelectedValuesList())
                    
                    // Vedo se la dimensione di templist sia > 1: il che vuol dire gli elementi selezionati hanno diverse
                    // caratteristiche per cui quel jtarea dell'attributo dovrà dare MULT SEL.
                    // qui non ho prima inizializzato il metodo ma ho lo scritto insieme ad invoke() nello stesso statement, vabbeh
                    if (templist.size() != 1)
                    {
                        try {
                            this.getClass().getMethod("setTxt_t_"+attributo, String.class).invoke(this, "MULTIPLE SELECTION");
                        } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
                            e.printStackTrace();
                        }
                    }
                    else
                    {
                        try {
                            this.getClass().getMethod("setTxt_t_"+attributo, String.class).invoke(this, templist.get(0));
                        } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
                            e.printStackTrace();
                        }
                    }
                    
                    // Clears the arraylist to store next attributo type in the next itereation
                    templist.clear();
                    
                } // Fine loop for (String attributo : attributeList)
                break;
        }
    }//GEN-LAST:event_jList1ValueChanged

    private void setStartingGenere()
    {
        if (jList1.getSelectedValue().getGENERE() != null) {
            for (int i = 0; i < t_GENERE.getItemCount(); i++)
            {
                if (References.GENRES_LIST[i].equals(jList1.getSelectedValue().getGENERE()))
                {
                    t_GENERE.setSelectedIndex(i);
                }
            }
        }
        else
        {
            t_GENERE.setSelectedIndex(-1);
        }
    }
    
    private void setCoverLabel()
    {
        if (jList1.getSelectedValue().hasCoverArt()) {
            ImageIcon imageIcon = new ImageIcon(
                    CoverArt.resize(jList1.getSelectedValue().getCOVERasBuffImm(), 240, 240));
            coverLabel.setIcon(imageIcon);

        } else {
            coverLabel.setIcon(null);
            coverLabel.setText("No Coverart found :(");
        }
    }

    private String getInputForMXM(Canzone canzone){

        if ((canzone.getAUTORE() != null && canzone.getTITOLO() != null) ) {
            return canzone.getAUTORE() + " - " + canzone.getTITOLO();
        } else {
            String aux = new File(canzone.getSong_path()).getName();
            return aux.substring(0, aux.length()-4);
        }
    }
    
    private void b_cercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cercaActionPerformed
        if (jList1.getSelectedIndices().length == 1) {
            java.awt.EventQueue.invokeLater(() -> {
                MXMDialog dialog = new MXMDialog(this, true);
                dialog.setT_input(getInputForMXM(jList1.getSelectedValue()));
                dialog.setSong(jList1.getSelectedValue());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        dialog.dispose();
                    }
                });
                dialog.setVisible(true);
            });
        } else {

            jList1.getSelectedValuesList().forEach(t -> {
                java.awt.EventQueue.invokeLater(() -> {
                    MXMDialog dialog = new MXMDialog(this, true);
                    dialog.setT_input(getInputForMXM(t));
                    dialog.setSong(jList1.getSelectedValue());
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            dialog.dispose();
                        }
                    });
                    dialog.setVisible(true);
                });


            });
        }


    }//GEN-LAST:event_b_cercaActionPerformed
   
    /* Qui ci sono un di fancy cheats e shortcuts alle varie textfields e altre componenti */
    // <editor-fold defaultstate="collapsed" desc="Mouse button3 bindings">
    private void t_TITOLOMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_t_TITOLOMouseClicked
        t_TITOLO.requestFocusInWindow();
        if (evt.getButton() == MouseEvent.BUTTON3 )
            t_TITOLO.select(0, t_TITOLO.getText().length());
    }//GEN-LAST:event_t_TITOLOMouseClicked

    private void t_ARTISTAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_t_ARTISTAMouseClicked
        t_ARTISTA.requestFocusInWindow();
        if (evt.getButton() == MouseEvent.BUTTON3)
            t_ARTISTA.select(0,  t_ARTISTA.getText().length());
    }//GEN-LAST:event_t_ARTISTAMouseClicked

    private void t_ALBUMMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_t_ALBUMMouseClicked
        t_ALBUM.requestFocusInWindow();
        if (evt.getButton() == MouseEvent.BUTTON3)
            t_ALBUM.select(0, t_ALBUM.getText().length());
    }//GEN-LAST:event_t_ALBUMMouseClicked

    private void t_AUTOREMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_t_AUTOREMouseClicked
        t_AUTORE.requestFocusInWindow();
        if (evt.getButton() == MouseEvent.BUTTON3)
            t_AUTORE.select(0, t_AUTORE.getText().length());
    }//GEN-LAST:event_t_AUTOREMouseClicked

    private void t_ANNOMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_t_ANNOMouseClicked
        t_ANNO.requestFocusInWindow();
        if (evt.getButton() == MouseEvent.BUTTON3)
            t_ANNO.select(0, t_ANNO.getText().length());
    }//GEN-LAST:event_t_ANNOMouseClicked

    private void t_NUMEROMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_t_NUMEROMouseClicked
        t_NUMERO.requestFocusInWindow();
        if (evt.getButton() == MouseEvent.BUTTON3)
            t_NUMERO.select(0, t_NUMERO.getText().length());
    }//GEN-LAST:event_t_NUMEROMouseClicked

    private void b_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_updateActionPerformed
        track_list.updateTrackList();
        repaint();
    }//GEN-LAST:event_b_updateActionPerformed

    private void b_dirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_dirActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(References.LIB_DIR));
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setMultiSelectionEnabled(false);

        if (evt.getSource() == b_dir) {
            int result_status = fc.showOpenDialog(b_dir);
            if (result_status == JFileChooser.APPROVE_OPTION) {
                String selected = fc.getSelectedFile().getPath();

                References.LIB_DIR = selected;
                track_list = new SongList(References.LIB_DIR);
                jList1.clearSelection();
                jList1.repaint();


                References.writeConfigFile(
                        References.MXM_API_KEY,
                        selected,
                        References.FILTER_SEARCH
                );
            }

        }


    }//GEN-LAST:event_b_dirActionPerformed

    // </editor-fold>
   
    
    //// ************* G E T T E R S & S E T T E R S ************* ////
    public JTextField getT_ALBUM() {return t_ALBUM;}
    public JTextField getT_TITOLO() {return t_TITOLO;}
    public JTextField getT_NUMERO() {return t_NUMERO;}
    public JComboBox<String> getT_GENERE() {return t_GENERE;}
    public JTextField getT_AUTORE() {return t_AUTORE;}
    public JTextField getT_ARTISTA() {return t_ARTISTA;}
    public JTextField getT_ANNO() {return t_ANNO;}
    public SongList getTrack_list() {return this.track_list;}

    public void setTxt_t_TITOLO(String newString){t_TITOLO.setText(newString);}
    public void setTxt_t_ARTISTA(String newString){t_ARTISTA.setText(newString);}
    public void setTxt_t_ALBUM(String newString){t_ALBUM.setText(newString);}
    public void setTxt_t_AUTORE(String newString){t_AUTORE.setText(newString);}
    public void setTxt_t_ANNO(String newString){t_ANNO.setText(newString);}
    public void setTxt_t_NUMERO(String newString){t_NUMERO.setText(newString);}
    public void setTxt_t_GENERE(String newString){
        // TODO decidere se mult sel comporta anche che visualizzi effetivamente mult sel e non casella vuota
        if (newString.equals("MULTIPLE SELECTION") || newString.equals("null")) {
            t_GENERE.setSelectedIndex(-1);
        }else{
            t_GENERE.setSelectedItem(newString);
        }
    }

    //// ************* F I E L D S   D E C L A R A T I O N ************* ////
    private SongList track_list = new SongList(References.LIB_DIR);

    // Actions
    private Action delete = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            b_deleteActionPerformed(e);
        }
    };
    private Action save = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            b_saveActionPerformed(e);
        }
    };


    // TODO: vedi quali campi possono essere resi locali
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_cerca;
    private javax.swing.JButton b_copia;
    private javax.swing.JButton b_delete;
    private javax.swing.JButton b_dir;
    private javax.swing.JButton b_image;
    private javax.swing.JButton b_save;
    private javax.swing.JButton b_sfoglia;
    private javax.swing.JButton b_update;
    private javax.swing.JLabel coverLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<Canzone> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField t_ALBUM;
    private javax.swing.JTextField t_ANNO;
    private javax.swing.JTextField t_ARTISTA;
    private javax.swing.JTextField t_AUTORE;
    private javax.swing.JComboBox<String> t_GENERE;
    private javax.swing.JTextField t_NUMERO;
    private javax.swing.JTextField t_TITOLO;
    private javax.swing.JTextField t_path;
    // End of variables declaration//GEN-END:variables

    
}
